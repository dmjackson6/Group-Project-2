openapi: 3.0.3
info:
  title: WasteNaut Admin API
  description: API for WasteNaut admin operations including user management, organization approval, report triage, and AI match management
  version: 1.0.0
  contact:
    name: WasteNaut Development Team
    email: dev@wastenaut.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.wastenaut.com/api/admin
    description: Production server
  - url: https://staging-api.wastenaut.com/api/admin
    description: Staging server
  - url: http://localhost:5000/api/admin
    description: Development server

security:
  - bearerAuth: []

paths:
  # Authentication
  /login:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Authenticate admin user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: admin@wastenaut.test
              password: admin123
              rememberMe: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve paginated list of users with filtering options
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          description: Filter by user status
          schema:
            type: string
            enum: [verified, pending, suspended]
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [individual, organization, donor]
        - name: search
          in: query
          description: Search in name and email
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    /verify:
      post:
        tags:
          - Users
        summary: Verify user account
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User verified successfully
          '404':
            description: User not found

    /suspend:
      post:
        tags:
          - Users
        summary: Suspend user account
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Reason for suspension
        responses:
          '200':
            description: User suspended successfully

    /unsuspend:
      post:
        tags:
          - Users
        summary: Unsuspend user account
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User unsuspended successfully

    /impersonate:
      post:
        tags:
          - Users
        summary: Start impersonation session
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Impersonation started
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    impersonationToken:
                      type: string
                      description: Token for impersonation session

  # Organization Management
  /organizations:
    get:
      tags:
        - Organizations
      summary: Get all organizations
      parameters:
        - name: status
          in: query
          description: Filter by approval status
          schema:
            type: string
            enum: [approved, pending, rejected]
        - name: type
          in: query
          description: Filter by organization type
          schema:
            type: string
            enum: [foodbank, charity, restaurant]
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

  /organizations/{orgId}:
    get:
      tags:
        - Organizations
      summary: Get organization details
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

    /approve:
      post:
        tags:
          - Organizations
        summary: Approve organization
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Organization approved successfully

    /reject:
      post:
        tags:
          - Organizations
        summary: Reject organization
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Reason for rejection
        responses:
          '200':
            description: Organization rejected

    /capacity:
      put:
        tags:
          - Organizations
        summary: Set organization capacity
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapacityUpdate'
        responses:
          '200':
            description: Capacity updated successfully

  # Donation Management
  /donations:
    get:
      tags:
        - Donations
      summary: Get all donations
      parameters:
        - name: status
          in: query
          description: Filter by donation status
          schema:
            type: string
            enum: [active, completed, expired, cancelled]
      responses:
        '200':
          description: List of donations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'

  /donations/{donationId}:
    get:
      tags:
        - Donations
      summary: Get donation details
      parameters:
        - name: donationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Donation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'

    /status:
      put:
        tags:
          - Donations
        summary: Update donation status
        parameters:
          - name: donationId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [active, completed, expired, cancelled]
        responses:
          '200':
            description: Status updated successfully

  # Report Management
  /reports:
    get:
      tags:
        - Reports
      summary: Get all reports
      parameters:
        - name: status
          in: query
          description: Filter by report status
          schema:
            type: string
            enum: [pending, investigating, resolved, dismissed]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: type
          in: query
          description: Filter by report type
          schema:
            type: string
            enum: [safety, fraud, inappropriate, technical]
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'

  /reports/{reportId}:
    get:
      tags:
        - Reports
      summary: Get report details
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'

    /status:
      put:
        tags:
          - Reports
        summary: Update report status
        parameters:
          - name: reportId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusUpdate'
        responses:
          '200':
            description: Status updated successfully

    /notes:
      post:
        tags:
          - Reports
        summary: Add note to report
        parameters:
          - name: reportId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteRequest'
        responses:
          '200':
            description: Note added successfully

    /resolve:
      post:
        tags:
          - Reports
        summary: Resolve report
        parameters:
          - name: reportId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  resolution:
                    type: string
                    description: Resolution notes
        responses:
          '200':
            description: Report resolved successfully

  /reports/assign:
    post:
      tags:
        - Reports
      summary: Assign reports to current admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reportIds:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Reports assigned successfully

  # Match Management
  /matches:
    get:
      tags:
        - Matches
      summary: Get all AI matches
      parameters:
        - name: status
          in: query
          description: Filter by match status
          schema:
            type: string
            enum: [pending, accepted, rejected, expired]
        - name: confidence
          in: query
          description: Filter by confidence level
          schema:
            type: string
            enum: [high, medium, low]
      responses:
        '200':
          description: List of matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'

  /matches/{matchId}:
    get:
      tags:
        - Matches
      summary: Get match details
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Match details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'

    /accept:
      post:
        tags:
          - Matches
        summary: Accept match
        parameters:
          - name: matchId
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Match accepted successfully

    /reject:
      post:
        tags:
          - Matches
        summary: Reject match
        parameters:
          - name: matchId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Reason for rejection
        responses:
          '200':
            description: Match rejected

    /override:
      post:
        tags:
          - Matches
        summary: Override match
        parameters:
          - name: matchId
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchOverride'
        responses:
          '200':
            description: Match overridden successfully

  /matches/generate:
    post:
      tags:
        - Matches
      summary: Generate new AI matches
      responses:
        '200':
          description: New matches generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of new matches generated

  # Dashboard
  /dashboard/activity:
    get:
      tags:
        - Dashboard
      summary: Get recent activity
      responses:
        '200':
          description: Recent activity data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityItem'

  /dashboard/alerts:
    get:
      tags:
        - Dashboard
      summary: Get system alerts
      responses:
        '200':
          description: System alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'

  # Settings
  /settings/roles:
    get:
      tags:
        - Settings
      summary: Get admin roles
      responses:
        '200':
          description: List of admin roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'

  /settings/notifications/templates:
    get:
      tags:
        - Settings
      summary: Get notification templates
      responses:
        '200':
          description: List of notification templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationTemplate'

  /settings/system:
    get:
      tags:
        - Settings
      summary: Get system settings
      responses:
        '200':
          description: System settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSettings'

    put:
      tags:
        - Settings
      summary: Update system settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemSettings'
      responses:
        '200':
          description: Settings updated successfully

  /settings/ai:
    put:
      tags:
        - Settings
      summary: Update AI settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AISettings'
      responses:
        '200':
          description: AI settings updated successfully

  /settings/notifications:
    put:
      tags:
        - Settings
      summary: Update notification settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: Notification settings updated successfully

  # Audit Logs
  /audit:
    get:
      tags:
        - Audit
      summary: Get audit logs
      parameters:
        - name: limit
          in: query
          description: Number of logs to return
          schema:
            type: integer
            default: 50
        - name: action
          in: query
          description: Filter by action type
          schema:
            type: string
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        rememberMe:
          type: boolean
          default: false

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          type: string
        user:
          $ref: '#/components/schemas/Admin'

    # Core Entities
    Admin:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [super_admin, admin, moderator]
        permissions:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, suspended]

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [individual, organization, donor]
        status:
          type: string
          enum: [verified, pending, suspended]
        createdAt:
          type: string
          format: date-time
        lastActive:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/UserProfile'
        organization:
          $ref: '#/components/schemas/Organization'

    UserProfile:
      type: object
      properties:
        phone:
          type: string
        address:
          type: string
        preferences:
          type: object
          properties:
            notifications:
              type: boolean
            privacy:
              type: string
              enum: [public, private, organization]

    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum: [foodbank, charity, restaurant]
        status:
          type: string
          enum: [approved, pending, rejected]
        registrationNumber:
          type: string
        address:
          type: string
        contact:
          $ref: '#/components/schemas/Contact'
        capacity:
          $ref: '#/components/schemas/Capacity'
        serviceAreas:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        approvedAt:
          type: string
          format: date-time
        description:
          type: string

    Contact:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string

    Capacity:
      type: object
      properties:
        max:
          type: integer
        used:
          type: integer
        notes:
          type: string

    CapacityUpdate:
      type: object
      properties:
        max:
          type: integer
        used:
          type: integer
        notes:
          type: string

    Donation:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [food, equipment, volunteer]
        status:
          type: string
          enum: [active, completed, expired, cancelled]
        quantity:
          type: integer
        unit:
          type: string
        donor:
          $ref: '#/components/schemas/Contact'
        recipient:
          $ref: '#/components/schemas/Contact'
        location:
          $ref: '#/components/schemas/Location'
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        pickupWindow:
          $ref: '#/components/schemas/TimeWindow'
        tags:
          type: array
          items:
            type: string

    Location:
      type: object
      properties:
        address:
          type: string
        coordinates:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

    TimeWindow:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time

    Report:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [safety, fraud, inappropriate, technical]
        priority:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [pending, investigating, resolved, dismissed]
        reporter:
          $ref: '#/components/schemas/Contact'
        reportedUser:
          $ref: '#/components/schemas/Contact'
        assignedTo:
          $ref: '#/components/schemas/Admin'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        evidence:
          type: array
          items:
            $ref: '#/components/schemas/Evidence'

    Note:
      type: object
      properties:
        id:
          type: integer
        author:
          type: string
        text:
          type: string
        type:
          type: string
          enum: [internal, public]
        createdAt:
          type: string
          format: date-time

    Evidence:
      type: object
      properties:
        type:
          type: string
          enum: [text, image, document, video]
        content:
          type: string

    StatusUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [pending, investigating, resolved, dismissed]
        notes:
          type: string

    NoteRequest:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
          enum: [internal, public]

    Match:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        type:
          type: string
          enum: [donation, volunteer, request]
        confidence:
          type: integer
          minimum: 0
          maximum: 100
        status:
          type: string
          enum: [pending, accepted, rejected, expired]
        from:
          $ref: '#/components/schemas/MatchParty'
        to:
          $ref: '#/components/schemas/MatchParty'
        factors:
          type: array
          items:
            $ref: '#/components/schemas/MatchFactor'
        aiNotes:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
        rejectedAt:
          type: string
          format: date-time
        rejectionReason:
          type: string

    MatchParty:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        location:
          type: string
        contact:
          type: string

    MatchFactor:
      type: object
      properties:
        weight:
          type: integer
          minimum: 0
          maximum: 100
        description:
          type: string

    MatchOverride:
      type: object
      properties:
        reason:
          type: string
        notes:
          type: string
        newConfidence:
          type: integer
          minimum: 0
          maximum: 100

    # Dashboard
    ActivityItem:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        userName:
          type: string
        action:
          type: string
        status:
          type: string
          enum: [success, warning, error]

    Alert:
      type: object
      properties:
        severity:
          type: string
          enum: [info, warning, error, critical]
        icon:
          type: string
        message:
          type: string

    # Settings
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        userCount:
          type: integer
        permissions:
          type: array
          items:
            type: string

    NotificationTemplate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [email, sms, push]
        status:
          type: string
          enum: [active, inactive]
        subject:
          type: string
        content:
          type: string

    SystemSettings:
      type: object
      properties:
        siteName:
          type: string
        maintenanceMode:
          type: boolean
        maxUsers:
          type: integer
        sessionTimeout:
          type: integer

    AISettings:
      type: object
      properties:
        aiEnabled:
          type: boolean
        confidenceThreshold:
          type: integer
          minimum: 0
          maximum: 100
        maxMatches:
          type: integer
        aiModel:
          type: string
          enum: [gpt-4, gpt-3.5-turbo, claude]

    NotificationSettings:
      type: object
      properties:
        emailEnabled:
          type: boolean
        smsEnabled:
          type: boolean
        pushEnabled:
          type: boolean

    # Audit
    AuditLog:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
        user:
          type: string
        userId:
          type: integer
        target:
          type: string
        targetId:
          type: integer
        timestamp:
          type: string
          format: date-time
        details:
          type: string
        ipAddress:
          type: string
        userAgent:
          type: string

    # Error
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        details:
          type: object
